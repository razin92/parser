from telepot.namedtuple import ReplyKeyboardMarkup, KeyboardButton
from telepot.loop import MessageLoop
from django.views import View
from django.http import JsonResponse
from .models import AuthorizedUser
from .secret import token_bot as TOKEN
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views.decorators.csrf import csrf_exempt
import telepot
import json
import time

bot = telepot.Bot(TOKEN)

#–°–ª–æ–≤–∞—Ä—å –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ Json
def json_extractor(msg):
    return dict(msg)

#–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
def base_data(msg):
    content_type, chat_type, chat_id = telepot.glance(msg)
    data = {'content_type': content_type, 'chat_type': chat_type, 'chat_id': chat_id}
    return data

class Keyboard():
    def registration_key(self):
        key1 = [KeyboardButton(text='ü§ù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', request_contact=True)]
        keyboard = ReplyKeyboardMarkup(
                keyboard=[key1, ],
                resize_keyboard=True,
                one_time_keyboard=True,
                selective=True,
            )
        return keyboard


#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def user_data_check(msg, user_data):
    if user_data in json_extractor(msg)['contact']:
        return json_extractor(msg)['contact'][user_data]

def user_creator(msg):
    try:
        if 'username' in json_extractor(msg)['from']:
            username = json_extractor(msg)['from']['username']
        else:
            username = None
        user_id = user_data_check(msg, 'user_id')
        telephone = user_data_check(msg, 'phone_number')
        first_name = user_data_check(msg, 'first_name')
        last_name = user_data_check(msg, 'last_name')
        user = AuthorizedUser.objects.create(
            first_name=first_name,
            last_name=last_name,
            user_name=username,
            user_id=user_id,
            telephone=telephone
        )
        message = 'ü§ù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        return (message, user)
    except:
        message = 'ü§ù –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
        return (message, None)

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def registration_control(msg):
    contact = json_extractor(msg)['contact']['user_id']
    sender = json_extractor(msg)['from']['id']
    return contact == sender

def registration(msg):
    content_type = base_data(msg)['content_type']
    chat_id = base_data(msg)['chat_id']
    if content_type == 'contact':
        if registration_control(msg):
            message, user = user_creator(msg)
            bot.sendMessage(chat_id, message)
            return (True, user)
        else:
            user = AuthorizedUser.objects.filter(user_id=chat_id)
            if user:
                message = 'ü§ù –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
                bot.sendMessage(chat_id, message)
                return (None, None)
            else:
                message = '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...'
                bot.sendMessage(chat_id, message)
                return (None, None)

def authorization(msg):
    chat_id = base_data(msg)['chat_id']
    user_id = json_extractor(msg)['from']['id']
    registration(msg)
    user = [x for x in AuthorizedUser.objects.filter(user_id=user_id).all()]

    if user:
        return (True, user[0])

    else:
        keys = Keyboard.registration_key(msg)
        message = '–ü—Ä–∏–≤–µ—Ç, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
        bot.sendMessage(chat_id, message, reply_markup=keys)
        return (False, None)

def authentication(msg):
    chat_id = base_data(msg)['chat_id']


    if authorization(msg)[0]:
        user = authorization(msg)[1]
        phone = user.telephone
        staff = [x for x in AuthorizedUser.objects.filter(telephone=phone, authorized=True).all()]

        if staff:
            return (True, staff[0])

        else:
            message = "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            bot.sendMessage(chat_id, message)
            return (False, None)

def bot_body(msg):
    content_type, chat_type, chat_id = telepot.glance(msg)
    print(content_type, chat_type, chat_id)
    print(dict(msg))
    if authorization(msg)[0]:
        if content_type == 'text' and msg['text'] == '/start':
            bot.sendMessage(chat_id, '–í—ã –≤ —Å–∏—Å—Ç–µ–º–µ')
            if authentication(msg)[0]:
                bot.sendMessage(chat_id,'–í—Å–µ –≥–æ—Ç–æ–≤–æ!')
        elif content_type == 'text' and msg['text'] == '/check':
            if authentication(msg)[0]:
                bot.sendMessage(chat_id, '–í—Å–µ –≥–æ—Ç–æ–≤–æ!')

def personal_bot(msg):
    chat_type = base_data(msg)['chat_type']
    chat_id = base_data(msg)['chat_id']
    if chat_type == 'private':
        bot_body(msg)
    else:
        message = '–Ø –Ω–µ –±—É–¥—É —Å –í–∞–º–∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –ø—Ä–∏ –≤—Å–µ—Ö, —Ç–æ–ª—å–∫–æ —Å –≥–ª–∞–∑—É –Ω–∞ –≥–ª–∞–∑.'
        bot.sendMessage(chat_id, message)

@login_required()
def run_bot(request):
    MessageLoop(bot, {'chat': personal_bot}).run_as_thread()
    print('–°–ª—É—à–∞—é...')

    while 1:
        time.sleep(5)
